source("test_Dataset.R")
q()
source("test_Dataset.R")
showMethods("dataset")
showMethods("matrices")
q()
source("test_Dataset.R")
showMethods("matrices")
remove.packages("SttrDataPackageClass")
remove.packages("SttrDataPackageClass")
remove.packages("SttrDataPackageClass", libPaths())
remove.packages("SttrDataPackageClass", .libPaths())
find.package("ChinookDataset")
find.package("SttrDataPackage")
.libPaths()
remove.packages("SttrDataPackage")
find.package("SttrDataPackage")
q()
source("test_Dataset.R")
q()
source("test_Dataset.R")
library(DEMOdz)
source("test_Dataset.R")
source("test_Dataset.R")
test.constructor()
test.loadFiles()
test.getPatientList()
test.getPatientTable()
get.getGeneSets()
test.getGeneSets()
source("test_Dataset.R")
runTests()
q()
source("test_Dataset.R")
runTests()
q()
source("test_Dataset.R")
runTests()
q()
source("test_Dataset.R"); runTests()
q()
source("test_Dataset.R"); 
slotNames(history(dp))
q()
source("test_Dataset.R"); 
sh <- history(dp)
class(sh)
getTable(sh)
sessionInfo()
q()
library(SubjectHistory)
sh <- SubjectHistory()
getTable(sh)
source("test_Dataset.R"); 
class(sh)
sessionInfo()
getTable(sh)
showMethods("getTable")
q()
source("test_Dataset.R"); 
q()
source("test_Dataset.R"); 
test.constructor()
q()
source("test_Dataset.R"); 
test.constructor()
Dataset:::.loadFiles
q()
source("test_Dataset.R"); 
test.constructor()
test.loadFiles()
q()
source("test_Dataset.R"); 
test.constructor()
test.loadFiles()
source("test_Dataset.R"); test.loadFiles()
source("test_Dataset.R"); test.loadFiles()
source("test_Dataset.R"); test.loadFiles()
test.loadTables()
test.getPatientList()
getSubjectList(dp)
q()
source("test_Dataset.R"); runTests()
getSubjectList(dp)
getSubjectIDs(dp)
dz <- DEMOdz()
getSubjectHistory(dz)
history(dz)
class(tbl.subjectHistory)
source("test_Dataset.R"); runTests()
q()
source("test_Dataset.R"); runTests()
source("test_Dataset.R"); runTests()
q()
source("test_Dataset.R"); runTests()
getItemNames(dp)
slotNames(dp)
q()
source("test_Dataset.R"); runTests()
dz <- DEMOdz()
slotNames(dz)
getItemNames(dz)
ls(dz@dictionary)
q()
source("test_Dataset.R"); runTests()
dz <- DEMOdz()
getItemNames(dz)
dim(getItemByName(dz, "mtx.cn"))
getItemByName(dz, "sampleJSON")
names
is(getItemByName(dz, "mtx.cn"))
   checkTrue("matrix" %in% is(getItemByName(dz, "mtx.cn"))
)
is(getItemByName(dz, "tbl.ptHistory")
)
x <- getItemByName(dz, "tbl.ptHistory")
class(x)
dz@dictionary[["tbl.ptHistory"]]
dz@history
class(dz@history)
q()
source("test_Dataset.R"); runTests()
checkTrue("SubjectHistory" %in% is(x))
is(x)
x
q()
source("test_Dataset.R"); runTests()
class(x)
names
dz@dictionary[["tbl.ptHistory"]]
ls(dz@dictionary)
dim(dz@dictionary$mtx.cn)
dim(dz@dictionary$tbl.ptHistory)
dz@dictionary$tbl.ptHistory
q()
source("test_Dataset.R"); runTests()
names
q()
source("test_Dataset.R"); runTests()
dim(manifest)
c
dim(manifest)
c
dim(manifest)
n
n
n
n
i
class
variable.name
c
c
c
dim(manifest)
c
print(load("~/oncogit/Oncoscape/dataPackages/DEMOdz/inst/extdata/tbl.ptHistory.RData"))
class(tbl.ptHistory)
q()
source("test_Dataset.R"); runTests()
history
Q
q()
source("test_Dataset.R"); runTests()
c
q()
source("test_Dataset.R"); runTests()
c
q()
source("test_Dataset.R"); runTests()
class(sh)
nrow(history(dp))
source("test_Dataset.R"); runTests()
q()
source("test_Dataset.R"); runTests()
traceback()
source("test_Dataset.R"); runTests()
source("test_Dataset.R"); runTests()
names
class(x)
x
class(history(dz))
manifest(dz)
wdth(1000)
manifest(dz)
q()
source("test_Dataset.R"); runTests()
class(x)
q()
source("test_Dataset.R"); runTests()
q()
source("test_Dataset.R"); runTests()
dz
manifest(dz)
wdth(800)
manifest(dz)
getNetwork(dz, "g.markers.json")
Q
q()
source("test_Dataset.R"); runTests()
ls(dz@dictionary)
Q
q()
source("test_Dataset.R"); runTests()
length(networks)
length(json.objects)
name
Q
name
length(networks)
names(networks)
c
ls(dz@dictionary)
wdth(1000)
manifest(dz)
print(load("../extdata/markers.json.RData"))
getwd()
file.exists("/Users/pshannon/oncogit/Oncoscape/dataPackages/DEMOdz/inst/extdata/markers.json.RData")
print(load("/Users/pshannon/oncogit/Oncoscape/dataPackages/DEMOdz/inst/extdata/markers.json.RData"))
class(g.markers.json)
xx <- fromJSON(g.markers.json)
library(jsonlite)
xx <- fromJSON(g.markers.json)
class(xx)
xxx <- toJSON(xx)
class(xxx)
q()
source("test_Dataset.R"); runTests()
c
c
c
c
c
c
ls(dz@dictionary)
g2 <- getNetwork(dz, "g.markers.json")
g2
colnames(manifest(dz))
library(jsonlite)
class(toJSON(g.chars))
manifest
manifest(dz)
wdth(1000)
manifest(dz)
Q
q()
source("test_Dataset.R");
dz <- DEMOdz()
q()
source("test_Dataset.R");
source("test_Dataset.R");
dz <- DEMOdz()
full.path
manifest <- read.table(full.path, sep="\t", header=TRUE, as.is=TRUE);
full.path
  full.path <- file.path(dir, "manifest.tsv")
full.path
file.exists(full.path)
Q
q()
source("test_Dataset.R");
dz <- DEMOdz()
c
c
dz <- DEMOdz()
file.exists(full.path)
Q
dz <- DEMOdz()
file.exists(full.path)
file.exists(dir)
dir
dir(dir)
full.path
full.path <- file.path(dir, "manifest.tsv")
full.path
file.exists(full.path)
manifest <- read.table(full.path, sep="\t", header=TRUE, as.is=TRUE);
wdth(1000)
manifest
c
q()
source("test_Dataset.R");
runTests()
getManifest(dp)
getItemNames(dp)
q()
source("test_Dataset.R");
source("test_Dataset.R");
q()
source("test_Dataset.R");
q()
source("test_Dataset.R");
ls(x)
all(expected.names %in% ls (dictionary))
all(expected.names %in% ls (x))
ls(x)
x[1] %in% ls(x)
expected.names
expected.names[1]
expected.names[1] %in% ls(x)
expected.names[2] %in% ls(x)
expected.names[2] 
all(expected.names %in% ls (x))
dim (x[["mtx.cn"]])
c
q()
source("test_Dataset.R");
test.constructor()
test.loadFiles()
test.getItemNamesGetItems()
c
c
getItemNames(dz)
c
getItemNames(dz)
 subset(tbl.manifest, class=="matrix")
rownames( subset(tbl.manifest, class=="matrix"))
sample
sample
rownamse(mtx)
rownames(mtx)
mtx
names(dz@dictionary)
dim(dz@dictionary$mtx.prot)
sample
rownames(mtx)
Q
q()
source("test_Dataset.R");
source("test_Dataset.R");
q()
source("test_Dataset.R");
source("test_Dataset.R");
runTests
runTests()
source("test_Dataset.R"); runTests()
q()
source("test_Dataset.R"); runTests()
q()
source("test_Dataset.R"); 
q()
